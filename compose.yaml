x-shared: &shared
  restart: unless-stopped
  image: docker.n8n.io/n8nio/n8n:1.106.1
  environment:
    DB_TYPE: postgresdb
    DB_POSTGRESDB_HOST: postgres
    DB_POSTGRESDB_PORT: 5432
    DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
    DB_POSTGRESDB_USER: ${POSTGRES_NON_ROOT_USER}
    DB_POSTGRESDB_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD}
    EXECUTIONS_MODE: queue
    QUEUE_BULL_REDIS_HOST: valkey
    QUEUE_HEALTH_CHECK_ACTIVE: true
    N8N_ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    N8N_HOST: ${SUBDOMAIN}.${DOMAIN_NAME}
    N8N_PORT: 5678
    N8N_PROTOCOL: https
    NODE_ENV: production
    WEBHOOK_URL: https://${SUBDOMAIN}.${DOMAIN_NAME}/
    GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
  volumes:
    - n8n_data:/home/node/.n8n
    - ./local-files:/files
  depends_on:
    postgres:
      condition: service_healthy
    valkey:
      condition: service_healthy
  extra_hosts:
    - host.docker.internal:host-gateway

services:

  n8n:
    container_name: ${COMPOSE_PROJECT_NAME}
    <<: *shared
    ports:
      - 5678:5678
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.entrypoints=https
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.docker.network=traefik-network
    networks:
      - default
      - traefik-network

  n8n-worker:
    container_name: ${COMPOSE_PROJECT_NAME}-worker
    <<: *shared
    command: worker
    depends_on:
      - n8n

  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    image: postgres:${POSTGRES_VERSION:-16}
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  valkey:
    container_name: ${COMPOSE_PROJECT_NAME}-valkey
    image: valkey/valkey:8-alpine
    restart: always
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ['CMD', 'valkey-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  n8n_data:
  postgres_data:
  valkey_data:

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}
  traefik-network:
    external: true
    name: ${TRAEFIK_NETWORK:-traefik-network}
